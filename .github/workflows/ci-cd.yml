name: CI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev pkg-config redis-tools

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build
        run: go build -v ./...

      - name: Wait for PostgreSQL
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U testuser -d testdb; then
              echo "PostgreSQL is ready"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done

      - name: Wait for Redis
        run: |
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping | grep -q PONG; then
              echo "Redis is ready"
              break
            fi
            echo "Waiting for Redis... (attempt $i/30)"
            sleep 2
          done

      - name: Setup test database
        env:
          PGPASSWORD: testpass
        run: |
          psql -h localhost -U testuser -d testdb -c "
          CREATE EXTENSION IF NOT EXISTS \"pgcrypto\";
          CREATE TABLE users (
              uid UUID PRIMARY KEY DEFAULT gen_random_uuid(),
              username TEXT NOT NULL UNIQUE,
              email TEXT NOT NULL UNIQUE,
              password_hash TEXT NOT NULL,
              role TEXT NOT NULL DEFAULT 'user'
          );

          CREATE TABLE subscriptions (
              id SERIAL PRIMARY KEY,
              service_name TEXT NOT NULL,
              price INT NOT NULL,
              username TEXT NOT NULL,
              start_date DATE NOT NULL,
              counter_months INT NOT NULL
          );

          CREATE TABLE yookassa_payment_tokens (
              id SERIAL PRIMARY KEY,
              user_id UUID NOT NULL,
              token TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );

          CREATE TABLE yookassa_payments (
              id SERIAL PRIMARY KEY,
              payment_id TEXT NOT NULL UNIQUE,
              user_id UUID NOT NULL,
              amount INT NOT NULL,
              currency TEXT NOT NULL DEFAULT 'RUB',
              status TEXT NOT NULL,
              created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
              updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          "

      - name: Run unit tests
        env:
          TEST_DB_URL: "postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable"
          TEST_REDIS_URL: "redis://localhost:6379"
          SKIP_RABBITMQ_TESTS: "true"
        run: go test -race -coverprofile=coverage.out -v ./...

      - name: Run integration tests
        env:
          TEST_DB_URL: "postgres://testuser:testpass@localhost:5432/testdb?sslmode=disable"
          TEST_REDIS_URL: "redis://localhost:6379"
          SKIP_RABBITMQ_TESTS: "true"
        run: go test -tags=integration -race -coverprofile=coverage-integration.out -v ./...

      - name: Show coverage
        run: |
          echo "Unit tests coverage:"
          go tool cover -func=coverage.out
          echo ""
          echo "Integration tests coverage:"
          go tool cover -func=coverage-integration.out

  lint:
    name: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.61.0

      - name: Run golangci-lint
        run: |
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  deploy:
    needs: lint
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: akhilgovmb/subscription-aggregator
      
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

